class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        res = []
        for i in range(1,len(nums)+1):
            if i not in nums:
                res.append(i)
        return res

--------------------------
without brute force :)
--------------------------

class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        for num in nums:
            index = abs(num) - 1
            nums[index] = -abs(nums[index])  # mark as seen

        return [i + 1 for i in range(len(nums)) if nums[i] > 0]

-------------------------------------------------------
Using a Set (Clean and readable, but uses space)
-------------------------------------------------------

def findDisappearedNumbers(nums):
    full = set(range(1, len(nums)+1))
    return list(full - set(nums))

-------------------------------------------------------
Frequency Array (or HashMap)
-------------------------------------------------------
from collections import Counter

def findDisappearedNumbers(nums):
    count = Counter(nums)
    return [i for i in range(1, len(nums)+1) if i not in count]

-------------------------------------------------------
Sort and Two-Pointer (Avoid if you want O(n))
-------------------------------------------------------
def findDisappearedNumbers(nums):
    nums.sort()
    result = []
    expected = 1
    i = 0

    while expected <= len(nums):
        if i < len(nums) and nums[i] == expected:
            while i < len(nums) and nums[i] == expected:
                i += 1
            expected += 1
        elif i < len(nums) and nums[i] < expected:
            i += 1
        else:
            result.append(expected)
            expected += 1

    return result

--------------------------------------------------------------------------------
SUMMARY
--------------------------------------------------------------------------------
| Method             | Time       | Space  | Mutates Input?  | Notes                           |
| ------------------ | ---------- | ------ | --------------- | ------------------------------- |
| **Sign Marking**   | O(n)       | O(1)   | ✅               | Best for interviews             |
| **Set Difference** | O(n)       | O(n)   | ❌               | Clean and fast to write         |
| **Hash Counter**   | O(n)       | O(n)   | ❌               | Easy with `collections.Counter` |
| **Sorting**        | O(n log n) | O(1)\* | ✅ (if in-place) | Only if O(n) isn’t needed       |

        
