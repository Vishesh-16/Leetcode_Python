import heapq

class Solution:
    def kthMax(self, nums: List[int], k: int) -> int:
        seen = set()
        min_heap = []

        for num in nums:
            if num in seen:
                continue
            seen.add(num)

            if len(min_heap) < k:
                heapq.heappush(min_heap, num)
            else:
                if num > min_heap[0]:
                    heapq.heappushpop(min_heap, num)

        return min_heap[0] if len(min_heap) == k else max(seen)

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

class Solution:
    def kthMax(self, nums: List[int], k: int) -> int:
        unique_nums = sorted(set(nums), reverse=True)  # Sort in descending order
        
        if len(unique_nums) >= k:
            return unique_nums[k - 1]  # k-th max (1-indexed)
        else:
            return unique_nums[0]  # Return the maximum
